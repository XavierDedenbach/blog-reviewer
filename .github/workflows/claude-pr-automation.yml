name: Claude PR Development Automation

on:
  issue_comment:
    types: [created]
  pull_request:
    types: [opened, synchronize]

jobs:
  claude-development:
    # Only run on PRs, not regular issues
    if: github.event.issue.pull_request != null && contains(github.event.comment.body, '@claude')
    runs-on: ubuntu-latest
    
    permissions:
      contents: write
      pull-requests: write
      issues: write
    
    steps:
    - name: Get PR Information
      id: pr-info
      uses: actions/github-script@v7
      with:
        script: |
          const { data: pr } = await github.rest.pulls.get({
            owner: context.repo.owner,
            repo: context.repo.repo,
            pull_number: context.issue.number
          });
          
          core.setOutput('pr-number', pr.number);
          core.setOutput('pr-title', pr.title);
          core.setOutput('branch-name', pr.head.ref);
          core.setOutput('pr-body', pr.body);
          
          return pr;
    
    - name: Checkout PR Branch
      uses: actions/checkout@v4
      with:
        ref: ${{ steps.pr-info.outputs.branch-name }}
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install anthropic requests pyyaml pytest pytest-cov
    
    - name: Parse PR Requirements
      id: parse-requirements
      run: |
        python .github/scripts/parse_pr_requirements.py \
          --pr-title="${{ steps.pr-info.outputs.pr-title }}" \
          --pr-body="${{ steps.pr-info.outputs.pr-body }}" \
          --comment-body="${{ github.event.comment.body }}"
        
        # Validate requirements file was created
        if [ ! -f "pr_requirements.json" ]; then
          echo "❌ ERROR: Requirements file was not created!"
          exit 1
        fi
        
        echo "✅ Requirements parsed successfully"
        echo "📁 Generated: pr_requirements.json"
    
    - name: Generate Code with Enhanced Claude Agent
      id: claude-generation
      run: |
        echo "🤖 Enhanced Claude AI Agent Starting..."
        echo "🎯 This agent will:"
        echo "   - Analyze requirements systematically"
        echo "   - Break down complex tasks"
        echo "   - Generate complete solutions"
        echo "   - Follow project patterns exactly"
        echo "   - Provide detailed explanations"
        
        python .github/scripts/claude_code_generator.py \
          --pr-number="${{ steps.pr-info.outputs.pr-number }}" \
          --requirements-file="pr_requirements.json"
        
        if [ $? -eq 0 ]; then
          echo "✅ Enhanced Agent completed successfully"
          echo "📁 Generated files saved"
          
          # Validate that actual implementation files were created
          python_files=$(find . -name "*.py" -newer .github/workflows/claude-pr-automation.yml 2>/dev/null || true)
          if [ -z "$python_files" ]; then
            echo "❌ ERROR: No Python implementation files were created!"
            echo "This indicates the Claude script failed to generate actual code."
            exit 1
          fi
          
          echo "✅ Found Python implementation files:"
          echo "$python_files"
        else
          echo "❌ Enhanced Agent failed"
          exit 1
        fi
      env:
        ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        GITHUB_REPOSITORY: ${{ github.repository }}
    
    - name: Run Tests and Handle TDD Iterations
      id: run-tests
      run: |
        echo "🧪 Starting TDD Iteration Process..."
        
        # Install pytest if not already installed
        pip install pytest pytest-cov
        
        # Initialize iteration counter
        iteration=1
        max_iterations=5  # Prevent infinite loops
        
        while [ $iteration -le $max_iterations ]; do
          echo "🔄 TDD Iteration $iteration/$max_iterations"
          
          # Check if we have tests to run
          if [ -d "tests/" ] && [ "$(find tests/ -name '*.py' -not -name '__init__.py' | wc -l)" -gt 0 ]; then
            echo "📋 Running tests..."
            
            # Run tests and capture exit code
            if python -m pytest -v --tb=short; then
              echo "✅ All tests passed on iteration $iteration!"
              echo "tests-passed=true" >> $GITHUB_OUTPUT
              echo "final-iteration=$iteration" >> $GITHUB_OUTPUT
              break
            else
              echo "❌ Tests failed on iteration $iteration"
              echo "tests-failed=true" >> $GITHUB_OUTPUT
              echo "current-iteration=$iteration" >> $GITHUB_OUTPUT
              
              # Check if we should continue to next iteration
              if [ $iteration -lt $max_iterations ]; then
                echo "🔄 Tests failed, triggering next iteration..."
                
                # Check if we have implementation files
                if [ -d "api/" ] || [ -d "core/" ] || [ -d "cli/" ] || [ -f "main.py" ]; then
                  echo "📝 Implementation exists, running Claude to fix failing tests..."
                  
                  # Trigger next Claude iteration
                  python .github/scripts/claude_code_generator.py \
                    --pr-number="${{ steps.pr-info.outputs.pr-number }}" \
                    --requirements-file="pr_requirements.json" \
                    --iteration="$iteration" \
                    --test-failures="$(python -m pytest --tb=no -q 2>&1 | head -10)"
                  
                  # Check if Claude made changes
                  if git diff --quiet; then
                    echo "⚠️ No changes made by Claude, stopping iterations"
                    break
                  fi
                  
                  echo "📝 Changes detected, continuing to next iteration..."
                else
                  echo "⚠️ No implementation files found, stopping iterations"
                  break
                fi
              else
                echo "⚠️ Maximum iterations reached ($max_iterations)"
                break
              fi
            fi
          else
            echo "📝 No tests found, stopping iterations"
            break
          fi
          
          iteration=$((iteration + 1))
        done
        
        echo "🏁 TDD Iteration Process Complete"
        echo "Final iteration: $iteration"
        echo "Tests passed: ${{ steps.run-tests.outputs.tests-passed }}"
    
    - name: Commit Generated Code
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "Claude Development Bot"
        
        # Check if actual implementation files were created
        python_files=$(find . -name "*.py" -newer .github/workflows/claude-pr-automation.yml 2>/dev/null || true)
        if [ -z "$python_files" ]; then
          echo "❌ ERROR: No Python implementation files were created!"
          echo "This indicates the Claude script failed to generate actual code."
          echo "The workflow should fail to prevent false positive commits."
          exit 1
        fi
        
        echo "✅ Found Python implementation files:"
        echo "$python_files"
        
        git add .
        if git diff --staged --quiet; then
          echo "No changes to commit"
        else
          git commit -m "feat: Enhanced Claude AI Agent Implementation for ${{ steps.pr-info.outputs.pr-title }}

          🤖 AI Agent Analysis & Implementation:
          - Requirements analyzed and broken down systematically
          - Solution architecture designed with detailed planning
          - Tests written following TDD approach
          - Implementation completed with validation
          - Code follows project patterns exactly
          
          📊 Generated by Enhanced Claude AI Agent
          🔍 PR: ${{ steps.pr-info.outputs.pr_title }}
          ⏱️  Generated: $(date -u +"%Y-%m-%d %H:%M UTC")
          
          This commit represents a complete, working solution
          that addresses all requirements systematically."
          git push
        fi
    
    - name: Update PR with Results
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          let comment = `## 🤖 Enhanced Claude AI Agent Complete!\n\n`;
          
          // Check if tests passed
          const testsFailed = '${{ steps.run-tests.outputs.tests-failed }}' === 'true';
          if (testsFailed) {
            comment += `⚠️ **Tests Failed** - Please review the generated code\n\n`;
          } else {
            comment += `✅ **Tests Passed** - Code is ready for review\n\n`;
          }
          
          // Add implementation details
          comment += `### 🎯 AI Agent Analysis\n`;
          comment += `- **Requirements**: Analyzed and broken down systematically\n`;
          comment += `- **Architecture**: Designed considering existing patterns\n`;
          comment += `- **Implementation**: Follows Test-Driven Development\n`;
          comment += `- **Quality**: Code follows project standards exactly\n\n`;
          
          // Add generated files info
          comment += `### 📁 Generated Files\n`;
          comment += `- Implementation follows TDD approach\n`;
          comment += `- Tests written before implementation\n`;
          comment += `- Code committed to branch: \`${{ steps.pr-info.outputs.branch-name }}\`\n\n`;
          
          // Add next steps
          comment += `### 🚀 Next Steps\n`;
          comment += `1. **Review the generated code** - AI agent has provided detailed explanations\n`;
          comment += `2. **Test locally if needed** - All tests should pass\n`;
          comment += `3. **Request changes or approve** - Code is production-ready\n\n`;
          
          // Add AI agent capabilities
          comment += `### 🤖 AI Agent Capabilities\n`;
          comment += `This enhanced agent:\n`;
          comment += `- **Analyzes requirements thoroughly** before implementation\n`;
          comment += `- **Breaks down complex tasks** into manageable steps\n`;
          comment += `- **Follows existing patterns** exactly\n`;
          comment += `- **Delivers complete solutions** that actually work\n`;
          comment += `- **Explains reasoning** for every design decision\n`;
          comment += `- **Validates approach** against project requirements\n\n`;
          
          comment += `---\n`;
          comment += `*Generated by Enhanced Claude AI Agent - Independent AI Development*`;
          
          await github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });
    
    - name: Mark PR Ready for Review
      if: steps.run-tests.outputs.tests-failed != 'true'
      uses: actions/github-script@v7
      with:
        script: |
          await github.rest.pulls.update({
            owner: context.repo.owner,
            repo: context.repo.repo,
            pull_number: ${{ steps.pr-info.outputs.pr-number }},
            draft: false
          });