name: Claude PR Development Automation

on:
  issue_comment:
    types: [created]
  pull_request:
    types: [opened, synchronize]

jobs:
  claude-development:
    # Only run on PRs, not regular issues
    if: github.event.issue.pull_request != null && contains(github.event.comment.body, '@claude')
    runs-on: ubuntu-latest
    
    permissions:
      contents: write
      pull-requests: write
      issues: write
    
    steps:
    - name: Get PR Information
      id: pr-info
      uses: actions/github-script@v7
      with:
        script: |
          const { data: pr } = await github.rest.pulls.get({
            owner: context.repo.owner,
            repo: context.repo.repo,
            pull_number: context.issue.number
          });
          
          core.setOutput('pr-number', pr.number);
          core.setOutput('pr-title', pr.title);
          core.setOutput('branch-name', pr.head.ref);
          core.setOutput('pr-body', pr.body);
          
          return pr;
    
    - name: Checkout PR Branch
      uses: actions/checkout@v4
      with:
        ref: ${{ steps.pr-info.outputs.branch-name }}
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install anthropic requests pyyaml
    
    - name: Parse PR Requirements
      id: parse-requirements
      run: |
        python .github/scripts/parse_pr_requirements.py \
          --pr-title="${{ steps.pr-info.outputs.pr-title }}" \
          --pr-body="${{ steps.pr-info.outputs.pr-body }}" \
          --comment-body="${{ github.event.comment.body }}"
    
    - name: Generate Code with Claude
      id: claude-generation
      run: |
        python .github/scripts/claude_code_generator.py \
          --pr-number="${{ steps.pr-info.outputs.pr-number }}" \
          --requirements-file="pr_requirements.json"
      env:
        ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        GITHUB_REPOSITORY: ${{ github.repository }}
    
    - name: Run Tests
      id: run-tests
      run: |
        if [ -f "requirements-test.txt" ]; then
          pip install -r requirements-test.txt
        fi
        if [ -f "pytest.ini" ] || [ -d "tests/" ]; then
          python -m pytest -v --tb=short || echo "tests-failed=true" >> $GITHUB_OUTPUT
        fi
    
    - name: Commit Generated Code
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "Claude Development Bot"
        
        git add .
        if git diff --staged --quiet; then
          echo "No changes to commit"
        else
          git commit -m "feat: Claude implementation for ${{ steps.pr-info.outputs.pr-title }}

          Auto-generated code following TDD approach:
          - Tests written first
          - Implementation follows test requirements
          - Code follows project standards
          
          Generated by Claude API automation"
          git push
        fi
    
    - name: Update PR with Results
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          let comment = `## ü§ñ Claude Development Complete\n\n`;
          
          // Check if tests passed
          const testsFailed = '${{ steps.run-tests.outputs.tests-failed }}' === 'true';
          if (testsFailed) {
            comment += `‚ö†Ô∏è **Tests Failed** - Please review the generated code\n\n`;
          } else {
            comment += `‚úÖ **Tests Passed** - Code is ready for review\n\n`;
          }
          
          comment += `### Generated Files:\n`;
          comment += `- Implementation follows TDD approach\n`;
          comment += `- Tests written before implementation\n`;
          comment += `- Code committed to branch: \`${{ steps.pr-info.outputs.branch-name }}\`\n\n`;
          
          comment += `### Next Steps:\n`;
          comment += `1. Review the generated code\n`;
          comment += `2. Test locally if needed\n`;
          comment += `3. Request changes or approve for merge\n`;
          
          await github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });
    
    - name: Mark PR Ready for Review
      if: steps.run-tests.outputs.tests-failed != 'true'
      uses: actions/github-script@v7
      with:
        script: |
          await github.rest.pulls.update({
            owner: context.repo.owner,
            repo: context.repo.repo,
            pull_number: ${{ steps.pr-info.outputs.pr-number }},
            draft: false
          });